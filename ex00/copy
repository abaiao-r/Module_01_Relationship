

#include "../includes/Workshop.hpp"

size_t Workshop::nextId = 1;

Workshop::Workshop() : idWorkshop(nextId++)
{
    std::cout << YELLOW << "Workshop default constructor called" << RESET 
        << std::endl;
}

Workshop::Workshop(const std::vector<std::string> &toolsNeeded) : idWorkshop(nextId++)
{
    std::cout << YELLOW << "Workshop parameterized constructor called" << RESET 
        << std::endl;

    this->toolsNeeded = toolsNeeded;
}

Workshop::Workshop(const Workshop &src) : idWorkshop(nextId++)
{
    std::cout << YELLOW << "Workshop copy constructor called" << RESET 
        << std::endl;

    for (std::vector<Worker *>::const_iterator it = src.workerList.begin(); 
        it != src.workerList.end(); it++)
    {
        this->workerList.push_back(*it); // copy the pointer, not the object
    }

}

Workshop &Workshop::operator=(const Workshop &rhs)
{
    std::cout << YELLOW << "Workshop assignation operator called" << RESET 
        << std::endl;

    if (this != &rhs)
    {
        removeAllWorkers();

        for (std::vector<Worker *>::const_iterator it = rhs.workerList.begin(); 
            it != rhs.workerList.end(); it++)
        {
            this->workerList.push_back(*it); // copy the pointer, not the object
        }
    }

    return (*this);
}

Workshop::~Workshop(void)
{
    std::cout << YELLOW << "Workshop destructor called" << RESET << std::endl;
    removeAllWorkers();
}

const std::vector<Worker *> &Workshop::getWorkerList(void) const
{
    return (this->workerList);
}

const std::vector<std::string> &Workshop::getToolsNeeded(void) const
{
    return (this->toolsNeeded);
}

const size_t &Workshop::getIdWorkshop(void) const
{
    return (this->idWorkshop);
}

bool Workshop::isWorkerRegistered(Worker *workerToCheck) const
{
    for (std::vector<Worker *>::const_iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        if (*it == workerToCheck)
        {
            std::cout << "Worker " << workerToCheck->getIdWorker() 
                << " is already registered in Workshop " << this->idWorkshop << std::endl;
            return (true);
        }
    }
    return (false);
}

bool Workshop::hasRequiredTools(Worker *workerToCheck) const
{
    std::vector<ATool *> workerToolList = workerToCheck->getToolList();
    for (std::vector<std::string>::const_iterator it = this->toolsNeeded.begin(); 
        it != this->toolsNeeded.end(); it++)
    {
        bool hasTool = false;
        for (std::vector<ATool *>::const_iterator it2 = workerToolList.begin(); 
            it2 != workerToolList.end(); it2++)
        {
            if ((*it2)->getType() == *it)
            {
                hasTool = true;
                break;
            }
        }
        if (!hasTool)
        {
            std::cout << RED << "Error: Worker " << workerToCheck->getIdWorker() 
                << " does not have the required tool " << *it << " for Workshop " 
                << this->idWorkshop << RESET << std::endl;
            return (false);
        }
    }
    std::cout << "Worker " << workerToCheck->getIdWorker() 
        << " has all the required tools for Workshop " << this->idWorkshop << std::endl;
    return (true);
}



void Workshop::registerWorker(Worker *newWorker)
{
    if (!newWorker)
    {
        std::cout << RED << "Error: Worker is NULL" << RESET << std::endl;
        return ;
    }

    if (isWorkerRegistered(newWorker))
        return ;

    if (!hasRequiredTools(newWorker))
        return ;

    this->workerList.push_back(newWorker);
    std::cout << "Worker " << newWorker->getIdWorker() << " registered in Workshop " 
        << this->idWorkshop << std::endl;
    newWorker->addWorkshop(this);
}

void Workshop::unregisterWorker(Worker *workerToRemove)
{
    std::vector<Worker *>::iterator it = this->workerList.begin();
    while (it != this->workerList.end())
    {
        if (*it == workerToRemove)
        {
            std::cout << "Worker " << workerToRemove->getIdWorker() 
                << " unregistered from Workshop " << this->idWorkshop << std::endl;
            this->workerList.erase(it);
            return;
        }
        it++;
    }
    std::cout << RED << "Error: Worker not found in Workshop" << RESET << std::endl;
}

void Workshop::removeAllWorkers(void)
{
    for (std::vector<Worker *>::iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        std::cout << "Worker " << (*it)->getIdWorker() << " unregistered from Workshop " 
            << this->idWorkshop << std::endl;
    }
    this->workerList.clear();
}

void Workshop::displayWorkers(void) const
{
    std::cout << "Workers in Workshop " << this->idWorkshop << ":" << std::endl;
    for (std::vector<Worker *>::const_iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        std::cout << "Worker " << (*it)->getIdWorker() << std::endl;
    }
}

void Workshop::executeWorkDay(void)
{
    std::cout << "Workshop " << this->idWorkshop << " is executing a work day" << std::endl;
    for (std::vector<Worker *>::iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        (*it)->work(*this);
    }
}
ATool::ATool(void) : numberOfUses(0), idTool(nextId++), owner(NULL)
{
    std::cout << YELLOW << "ATool default constructor called" << RESET 
        << std::endl;
    printToolInfo(); 
}


ATool::ATool(std::string const &type) : type(type), numberOfUses(0), 
    idTool(nextId++), owner(NULL)
{
    std::cout << YELLOW << "ATool parameterized constructor called" << RESET 
        << std::endl;
    printToolInfo();
}

ATool::ATool(ATool const &src) : idTool(nextId++)
{
    *this = src;
    std::cout << YELLOW << "ATool copy constructor called" << RESET 
        << std::endl;
    printToolInfo();
}

ATool::~ATool(void)
{
    std::cout << ORANGE << "ATool destructor called" << RESET << std::endl;

    printToolInfo();
}


ATool &ATool::operator=(ATool const &src)
{
    if (this != &src)
    {
        this->numberOfUses = src.numberOfUses;
    }
    std::cout << YELLOW << "ATool assignation operator called" << RESET 
        << std::endl;
    printToolInfo();
    
    return (*this);
}

const std::string &ATool::getType(void) const
{
    std::cout << YELLOW << "Tool type: " << this->type << RESET << std::endl;
    return (this->type);
}

const size_t &ATool::getNumberOfUses(void) const
{
    std::cout << YELLOW << "Number of uses: " << this->numberOfUses << RESET 
        << std::endl;
    return (this->numberOfUses);
}

const size_t &ATool::getIdTool(void) const
{
    std::cout << YELLOW << "ID: " << this->idTool << RESET << std::endl;
    return (this->idTool);
}

Worker *ATool::getOwner(void) const
{
    std::cout << YELLOW << "Owner: " << this->owner << RESET << std::endl;
    return (this->owner);
}

void ATool::printToolInfo(void) const
{
    std::cout << "\n------------Tool info------------" << std::endl;
    getType();
    getIdTool();
    getNumberOfUses();
    getOwner();
    std::cout << "---------------------------------\n" << std::endl;
}

void ATool::setOwner(Worker *newOwner)
{
    this->owner = newOwner;
    std::cout << YELLOW << "Owner set to: " << this->owner << RESET 
        << std::endl;
    printToolInfo();
}



#include "../includes/Hammer.hpp"

Hammer::Hammer(void) : ATool("Hammer")
{    //print: what constructor is called, the id of the object, and the number of uses
    std::cout << YELLOW << "Hammer default constructor called" << RESET 
        << std::endl;
}

Hammer::Hammer(const Hammer &src) : ATool(src)
{
    *this = src;
    this->numberOfUses = 0;
    this->owner = NULL;
    std::cout << YELLOW << "Hammer copy constructor called" << RESET 
        << std::endl;
}

Hammer::~Hammer(void)
{
    std::cout << ORANGE << "Hammer destructor called" << RESET << std::endl;
}

Hammer &Hammer::operator=(const Hammer &rhs)
{
    if (this != &rhs)
    {
        this->type = rhs.type;
        this->numberOfUses = 0;
        this->owner = NULL;
    }
    std::cout << YELLOW << "Hammer assignation operator called" << RESET 
        << std::endl;
    
    return (*this);
}

void Hammer::use(void)
{
    this->numberOfUses++;
    std::cout << YELLOW << "Hammer used" << RESET << std::endl;
    printToolInfo();
}

#ifndef COLOURS_HPP
# define COLOURS_HPP

# define RESET "\033[0m"
# define RED "\033[31m"
# define BOLDRED "\033[1m\033[31m"
# define GREEN "\033[32m"
# define BOLDGREEN "\033[1m\033[32m"
# define YELLOW "\033[33m"
# define BOLDYELLOW "\033[1m\033[33m"
# define BLUE "\033[34m"
# define BOLDBLUE "\033[1m\033[34m"
# define MAGENTA "\033[35m"
# define BOLDMAGENTA "\033[1m\033[35m"
# define CYAN "\033[36m"
# define BOLDCYAN "\033[1m\033[36m"
# define ORANGE "\033[38;5;208m"
# define BOLDORANGE "\033[1m\033[38;5;208m"
# define PURPLE "\033[38;5;129m"
# define BOLDPURPLE "\033[1m\033[38;5;129m"
# define PINK "\033[38;5;13m"
# define BOLDPINK "\033[1m\033[38;5;13m"

#endif

#ifndef STATISTIC_HPP
# define STATISTIC_HPP

struct statistic
{
    int level;
    int exp;
};

#endif

#ifndef WORKER_HPP
# define WORKER_HPP

# include <iostream>
# include <string>
# include <vector>
# include "position.hpp"
# include "statistic.hpp"
# include "colours.hpp"
# include "Shovel.hpp"
# include "ATool.hpp"
# include "Workshop.hpp"

class Workshop; // Forward declaration

class Worker
{
    private:
        position coordonnee;
        statistic stat;
        std::vector<ATool *> toolList;
        static size_t nextId;
        const size_t idWorker;
        std::vector<Workshop *> workshopList;
    
    public:
        Worker(void);
        Worker(int x, int y, int z, int level, int exp);
        Worker(const Worker &src);
        ~Worker(void);
        Worker &operator=(const Worker &rhs);
        
        void setPosition(int x, int y, int z);
        void setStatistic(int level, int exp);
        void addWorkshop(Workshop *workshop);
        void removeWorkshop(Workshop *workshop);

        const position &getPosition(void) const;
        const statistic &getStatistic(void) const;
        const size_t &getIdWorker(void) const;
        const std::vector<ATool *> &getToolList(void) const;
        const std::vector<Workshop *> &getWorkshopList(void) const;
    

        void work(Workshop &workshop);
        void displayWorkshops(void) const;

        void giveTool(ATool *newTool);
        void takeAwayTool(ATool *toolToRemove);
        void removeAllTools(void);
        void useTool(size_t toolId); // New method to use a tool by its ID
        template<typename ToolType>
        ToolType* GetTool(void) const;

};

#endif

#ifndef POSITION_HPP
# define POSITION_HPP

struct position
{
    int x;
    int y;
    int z;
};

#endif
