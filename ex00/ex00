











#ifndef TOOL_HPP
# define TOOL_HPP

# include <iostream>
# include <string>
# include "colours.hpp"

class Worker;

class ATool
{
    protected:
        std::string type;
        size_t numberOfUses;
        static size_t nextId;
        const size_t idTool;
        Worker *owner; 

    public:
        ATool(void);
        ATool(std::string const &type);
        ATool(ATool const &src);
        ATool &operator=(ATool const &src);
        virtual ~ATool(void);

        
        const std::string &getType(void) const;
        const size_t &getNumberOfUses(void) const;
        const size_t &getIdTool(void) const;
        Worker *getOwner(void) const;
        void printToolInfo(void) const;

        
        void setOwner(Worker *newOwner);
        virtual void use(void) = 0;

};

#endif














#ifndef COLOURS_HPP
# define COLOURS_HPP

# define RESET "\033[0m"
# define RED "\033[31m"
# define BOLDRED "\033[1m\033[31m"
# define GREEN "\033[32m"
# define BOLDGREEN "\033[1m\033[32m"
# define YELLOW "\033[33m"
# define BOLDYELLOW "\033[1m\033[33m"
# define BLUE "\033[34m"
# define BOLDBLUE "\033[1m\033[34m"
# define MAGENTA "\033[35m"
# define BOLDMAGENTA "\033[1m\033[35m"
# define CYAN "\033[36m"
# define BOLDCYAN "\033[1m\033[36m"
# define ORANGE "\033[38;5;208m"
# define BOLDORANGE "\033[1m\033[38;5;208m"
# define PURPLE "\033[38;5;129m"
# define BOLDPURPLE "\033[1m\033[38;5;129m"
# define PINK "\033[38;5;13m"
# define BOLDPINK "\033[1m\033[38;5;13m"

#endif














#ifndef HAMMER_HPP
# define HAMMER_HPP

# include <iostream>
# include "ATool.hpp"
# include "colours.hpp"

class Hammer : public ATool
{       
    public:
        Hammer(void);
        Hammer(const Hammer &src);
        Hammer &operator=(const Hammer &rhs);
        ~Hammer(void);

        
        void use(void);
};

#endif














#ifndef STATISTIC_HPP
# define STATISTIC_HPP

struct statistic
{
    int level;
    int exp;
};

#endif














#ifndef SHOVEL_HPP
# define SHOVEL_HPP

# include <iostream>
# include "ATool.hpp"
# include "colours.hpp"


class Shovel : public ATool
{       
    public:
        Shovel(void);
        Shovel(const Shovel &src);
        Shovel &operator=(const Shovel &rhs);
        ~Shovel(void);

        
        void use(void);
};

#endif














#ifndef WORKER_HPP
# define WORKER_HPP

# include <iostream>
# include <string>
# include <vector>
# include "position.hpp"
# include "statistic.hpp"
# include "colours.hpp"
# include "Shovel.hpp"
# include "ATool.hpp"
# include "Workshop.hpp"

class Workshop; 

class Worker
{
    private:
        position coordonnee;
        statistic stat;
        std::vector<ATool *> toolList;
        static size_t nextId;
        const size_t idWorker;
        std::vector<Workshop *> workshopList;
    
    public:
        Worker(void);
        Worker(int x, int y, int z, int level, int exp);
        Worker(const Worker &src);
        ~Worker(void);
        Worker &operator=(const Worker &rhs);
        
        
        void setPosition(int x, int y, int z);
        void setStatistic(int level, int exp);
        void addWorkshop(Workshop *workshop);
        void removeWorkshop(Workshop *workshop);

        
        const position &getPosition(void) const;
        const statistic &getStatistic(void) const;
        const size_t &getIdWorker(void) const;
        const std::vector<ATool *> &getToolList(void) const;
        const std::vector<Workshop *> &getWorkshopList(void) const;
    

        void work(Workshop &workshop);
        void displayWorkshops(void) const;

        
        void giveTool(ATool *newTool);
        void takeAwayTool(ATool *toolToRemove);
        void removeAllTools(void);
        void useTool(size_t toolId); 
        template<typename ToolType>
        ToolType* GetTool(void) const;

};

#endif














#ifndef WORKSHOP_HPP
# define WORKSHOP_HPP

# include <iostream>
# include <string>
# include <vector>
# include "colours.hpp"
# include "Worker.hpp"

class Workshop
{
    private:
        std::vector<Worker *> workerList;
        std::vector<std::string> toolsNeeded;
        static size_t nextId;
        const size_t idWorkshop;
        Workshop(void);

    
    public:
        Workshop(const std::vector<std::string> &toolsNeeded);
        Workshop(const Workshop &src);
        Workshop &operator=(const Workshop &rhs);
        ~Workshop(void);
        
        
        const std::vector<Worker *> &getWorkerList(void) const;
        const std::vector<std::string> &getToolsNeeded(void) const;
        const size_t &getIdWorkshop(void) const;
        
        
        void registerWorker(Worker *newWorker);
        void unregisterWorker(Worker *workerToRemove);
        void removeAllWorkers(void);
        void displayWorkers(void) const;
        void executeWorkDay(void);

        bool isWorkerRegistered(Worker *workerToCheck) const;
        bool hasRequiredTools(Worker *workerToCheck) const;
};

#endif















#ifndef POSITION_HPP
# define POSITION_HPP

struct position
{
    int x;
    int y;
    int z;
};

#endif














#include "../includes/Worker.hpp"

size_t Worker::nextId = 1;

Worker::Worker() : idWorker(nextId++)
{
    std::cout << YELLOW << "Worker default constructor called" << RESET 
        << std::endl;
    
    this->coordonnee.x = 0;
    this->coordonnee.y = 0;
    this->coordonnee.z = 0;
    this->stat.level = 0;
    this->stat.exp = 0;

}

Worker::Worker(int x, int y, int z, int level, int exp) : idWorker(nextId++)
{
    std::cout << YELLOW << "Worker parameterized constructor called" << RESET 
        << std::endl;
    getIdWorker();
    this->coordonnee.x = x;
    this->coordonnee.y = y;
    this->coordonnee.z = z;
    this->stat.level = level;
    this->stat.exp = exp;

}

Worker::Worker(const Worker &src) : coordonnee(src.coordonnee), stat(src.stat), 
    idWorker(nextId++)
{
    std::cout << YELLOW << "Worker copy constructor called" << RESET 
        << std::endl;
    getIdWorker();

    
    for (std::vector<ATool *>::const_iterator it = src.toolList.begin(); 
        it != src.toolList.end(); it++)
    {
        this->toolList.push_back(*it); 
    }

}

Worker::~Worker(void)
{
    std::cout << ORANGE << "Worker destructor called" << RESET << std::endl;
    getIdWorker();
    if (this->toolList.size() > 0)
    {
        std::cout << " However, the tool was not destroyed." << std::endl;
        removeAllTools();
    }
}

Worker &Worker::operator=(const Worker &rhs)
{
    std::cout << YELLOW << "Worker assignation operator called" << RESET 
        << std::endl;
    getIdWorker();
    if (this != &rhs)
    {
        this->coordonnee = rhs.coordonnee;
        this->stat = rhs.stat;
        removeAllTools();
        
        for (std::vector<ATool *>::const_iterator it = rhs.toolList.begin(); 
            it != rhs.toolList.end(); it++)
        {
            this->toolList.push_back(*it); 
        }
    }
    return (*this);
}

void Worker::setPosition(int x, int y, int z)
{
    std::cout << "Worker setPosition called: x = " << x << ", y = " 
        << y << ", z = " << z << std::endl;
    getIdWorker();
    
    this->coordonnee.x = x;
    this->coordonnee.y = y;
    this->coordonnee.z = z;
}

void Worker::setStatistic(int level, int exp)
{
    std::cout << "Worker setStatistic called: level = " << level 
        << ", exp = " << exp << std::endl;
    getIdWorker();
    
    this->stat.level = level;
    this->stat.exp = exp;
}

void Worker::addWorkshop(Workshop *workshop)
{
    
    if (workshop == NULL)
    {
        std::cout << "Worker " << this->idWorker << " cannot register in a NULL workshop." << std::endl;
        return;
    }

    
    for (std::vector<Workshop *>::iterator it = this->workshopList.begin(); 
        it != this->workshopList.end(); it++)
    {
        if (*it == workshop)
        {
            std::cout << "Worker " << this->idWorker << " already registered in workshop with ID: " 
                << workshop->getIdWorkshop() << std::endl;
            return;
        }
    }

    this->workshopList.push_back(workshop);
    std::cout << "Worker 1 registered in workshop with ID: " << workshop->getIdWorkshop() << std::endl;
    
}

void Worker::removeWorkshop(Workshop *workshop)
{
    
    if (workshop == NULL)
    {
        std::cout << "Worker " << this->idWorker << " cannot unregister from a NULL workshop." << std::endl;
        return;
    }

    std::vector<Workshop *>::iterator it = this->workshopList.begin();
    while (it != this->workshopList.end())
    {
        if (*it == workshop)
        {
            std::cout << "Worker " << this->idWorker << " is unregistering from workshop with ID: " 
                << workshop->getIdWorkshop() << std::endl;
            this->workshopList.erase(it);
            return;
        }
        it++;
    }
    std::cout << "Worker " << this->idWorker << " is not registered in workshop with ID: " 
        << workshop->getIdWorkshop() << std::endl;
}

const position &Worker::getPosition(void) const
{
    std::cout << "Worker getPosition called! Position: x = " 
        << this->coordonnee.x << ", y = " << this->coordonnee.y << ", z = " 
        << this->coordonnee.z << std::endl;
    getIdWorker();
    
    return (this->coordonnee);
}

const statistic &Worker::getStatistic(void) const
{
    std::cout << "Worker getStatistic called! Statistic: level = " 
        << this->stat.level << ", exp = " << this->stat.exp << std::endl;
    getIdWorker();
    
    return (this->stat);
}

const size_t &Worker::getIdWorker(void) const
{
    std::cout << "Worker getIdWorker called! Worker ID: " << this->idWorker 
        << std::endl;
    return (this->idWorker);
}

const std::vector<ATool *> &Worker::getToolList(void) const
{
    std::cout << "Worker getToolList called! Worker ID: " << this->idWorker 
        << std::endl;
    return (this->toolList);
}

const std::vector<Workshop *> &Worker::getWorkshopList(void) const
{
    std::cout << "Worker getWorkshopList called! Worker ID: " << this->idWorker 
        << std::endl;
    return (this->workshopList);
}

void Worker::giveTool(ATool *newTool)
{
    
    for (std::vector<ATool *>::iterator it = this->toolList.begin(); 
        it != this->toolList.end(); it++)
    {
        if (*it == newTool)
        {
            std::cout << "Worker " << this->idWorker << " already has tool with ID: " 
                << newTool->getIdTool() << std::endl;
            return;
        }
    }

    
    Worker *previousOwner = newTool->getOwner();
    if (previousOwner != NULL)
    {
        previousOwner->takeAwayTool(newTool);
    }

    this->toolList.push_back(newTool);
    newTool->setOwner(this);
    std::cout << "Worker " << this->idWorker << " received a new tool with ID: " 
        << newTool->getIdTool() << std::endl;
}

void Worker::takeAwayTool(ATool *toolToRemove)
{
    std::vector<ATool *>::iterator it = this->toolList.begin();
    while (it != this->toolList.end())
    {
        if (*it == toolToRemove)
        {
            std::cout << "Worker " << this->idWorker << " is removing tool with ID: " 
                << toolToRemove->getIdTool() << std::endl;
            this->toolList.erase(it);
            toolToRemove->setOwner(NULL); 
            
            
            
            for (std::vector<Workshop *>::iterator item = this->workshopList.begin(); 
                item != this->workshopList.end(); item++)
            {
                if (!(*item)->hasRequiredTools(this))
                {
                    (*item)->unregisterWorker(this);
                }
            }
            return;
        }
        it++;
    }

    std::cout << "Worker " << this->idWorker << " did not find tool with ID: " 
        << toolToRemove->getIdTool() << std::endl;
}

void Worker::removeAllTools(void)
{
    
    std::cout << "Worker " << this->idWorker << " is clearing all tools without deleting them." << std::endl;
    
    for (std::vector<ATool *>::iterator it = this->toolList.begin(); 
        it != this->toolList.end(); it++)
    {
        (*it)->setOwner(NULL);
    }
    this->toolList.clear();
    
    for (std::vector<Workshop *>::iterator it = this->workshopList.begin(); 
        it != this->workshopList.end(); it++)
    {
        (*it)->unregisterWorker(this);
    }
}

void Worker::useTool(size_t toolId)
{
    std::vector<ATool *>::iterator it = this->toolList.begin();
    while (it != this->toolList.end())
    {
        if ((*it)->getIdTool() == toolId)
        {
            (*it)->use();
            return;
        }
        it++;
    }
    std::cout << "Worker " << this->idWorker << " did not find tool with ID: " 
        << toolId << std::endl;
}

void Worker::work(Workshop &workshop)
{
    
    if (!workshop.isWorkerRegistered(this))
    {
        std::cout << "Worker " << this->idWorker << " is not registered in workshop with ID: " 
            << workshop.getIdWorkshop() << std::endl;
        return;
    }
    
    if (!workshop.hasRequiredTools(this))
    {
        std::cout << "Worker " << this->idWorker << " does not have all the required tools for workshop with ID: " 
            << workshop.getIdWorkshop() << std::endl;
        return;
    }
    std::cout << "Worker " << this->idWorker << " is working in workshop with ID: " 
        << workshop.getIdWorkshop() << std::endl;
}

void Worker::displayWorkshops(void) const
{
    std::cout << YELLOW<< "Worker " << this->idWorker << " is registered in the following workshops:" << RESET << std::endl;
    for (std::vector<Workshop *>::const_iterator it = this->workshopList.begin(); 
        it != this->workshopList.end(); it++)
    {
        std::cout << "Workshop ID: " << (*it)->getIdWorkshop() << std::endl;
    }
}

template <typename ToolType>
 ToolType* Worker::GetTool(void) const
{
    for (std::vector<ATool *>::const_iterator it = this->toolList.begin(); 
        it != this->toolList.end(); it++)
    {
        if (dynamic_cast<ToolType*>(*it))
        {
            return (dynamic_cast<ToolType*>(*it));
        }
    }
    return (NULL);
}














#include "../includes/Workshop.hpp"

size_t Workshop::nextId = 1;

Workshop::Workshop() : idWorkshop(nextId++)
{
    std::cout << YELLOW << "Workshop default constructor called" << RESET 
        << std::endl;
}

Workshop::Workshop(const std::vector<std::string> &toolsNeeded) : idWorkshop(nextId++)
{
    std::cout << YELLOW << "Workshop parameterized constructor called" << RESET 
        << std::endl;

    this->toolsNeeded = toolsNeeded;
}

Workshop::Workshop(const Workshop &src) : idWorkshop(nextId++)
{
    std::cout << YELLOW << "Workshop copy constructor called" << RESET 
        << std::endl;

    
    for (std::vector<Worker *>::const_iterator it = src.workerList.begin(); 
        it != src.workerList.end(); it++)
    {
        this->workerList.push_back(*it); 
    }

}

Workshop &Workshop::operator=(const Workshop &rhs)
{
    std::cout << YELLOW << "Workshop assignation operator called" << RESET 
        << std::endl;

    if (this != &rhs)
    {
        removeAllWorkers();

        
        for (std::vector<Worker *>::const_iterator it = rhs.workerList.begin(); 
            it != rhs.workerList.end(); it++)
        {
            this->workerList.push_back(*it); 
        }
    }

    return (*this);
}

Workshop::~Workshop(void)
{
    std::cout << YELLOW << "Workshop destructor called" << RESET << std::endl;
    removeAllWorkers();
}

const std::vector<Worker *> &Workshop::getWorkerList(void) const
{
    return (this->workerList);
}

const std::vector<std::string> &Workshop::getToolsNeeded(void) const
{
    return (this->toolsNeeded);
}

const size_t &Workshop::getIdWorkshop(void) const
{
    return (this->idWorkshop);
}


bool Workshop::isWorkerRegistered(Worker *workerToCheck) const
{
    for (std::vector<Worker *>::const_iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        if (*it == workerToCheck)
        {
            std::cout << "Worker " << workerToCheck->getIdWorker() 
                << " is already registered in Workshop " << this->idWorkshop << std::endl;
            return (true);
        }
    }
    return (false);
}


bool Workshop::hasRequiredTools(Worker *workerToCheck) const
{
    
    std::vector<ATool *> workerToolList = workerToCheck->getToolList();
    
    for (std::vector<std::string>::const_iterator it = this->toolsNeeded.begin(); 
        it != this->toolsNeeded.end(); it++)
    {
        bool hasTool = false;
        for (std::vector<ATool *>::const_iterator it2 = workerToolList.begin(); 
            it2 != workerToolList.end(); it2++)
        {
            if ((*it2)->getType() == *it)
            {
                hasTool = true;
                break;
            }
        }
        if (!hasTool)
        {
            std::cout << RED << "Error: Worker " << workerToCheck->getIdWorker() 
                << " does not have the required tool " << *it << " for Workshop " 
                << this->idWorkshop << RESET << std::endl;
            return (false);
        }
    }
    std::cout << "Worker " << workerToCheck->getIdWorker() 
        << " has all the required tools for Workshop " << this->idWorkshop << std::endl;
    return (true);
}



void Workshop::registerWorker(Worker *newWorker)
{
    
    if (!newWorker)
    {
        std::cout << RED << "Error: Worker is NULL" << RESET << std::endl;
        return ;
    }

    
    if (isWorkerRegistered(newWorker))
        return ;

    
    if (!hasRequiredTools(newWorker))
        return ;

    
    this->workerList.push_back(newWorker);
    std::cout << "Worker " << newWorker->getIdWorker() << " registered in Workshop " 
        << this->idWorkshop << std::endl;
    
    newWorker->addWorkshop(this);
}

void Workshop::unregisterWorker(Worker *workerToRemove)
{
    std::vector<Worker *>::iterator it = this->workerList.begin();
    while (it != this->workerList.end())
    {
        if (*it == workerToRemove)
        {
            std::cout << "Worker " << workerToRemove->getIdWorker() 
                << " unregistered from Workshop " << this->idWorkshop << std::endl;
            this->workerList.erase(it);
            return;
        }
        it++;
    }
    std::cout << RED << "Error: Worker not found in Workshop" << RESET << std::endl;
}

void Workshop::removeAllWorkers(void)
{
    for (std::vector<Worker *>::iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        std::cout << "Worker " << (*it)->getIdWorker() << " unregistered from Workshop " 
            << this->idWorkshop << std::endl;
    }
    this->workerList.clear();
}


void Workshop::displayWorkers(void) const
{
    std::cout << "Workers in Workshop " << this->idWorkshop << ":" << std::endl;
    for (std::vector<Worker *>::const_iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        std::cout << "Worker " << (*it)->getIdWorker() << std::endl;
    }
}


void Workshop::executeWorkDay(void)
{
    std::cout << "Workshop " << this->idWorkshop << " is executing a work day" << std::endl;
    for (std::vector<Worker *>::iterator it = this->workerList.begin(); 
        it != this->workerList.end(); it++)
    {
        (*it)->work(*this);
    }
}














#include "../includes/ATool.hpp"

size_t ATool::nextId = 1;


ATool::ATool(void) : numberOfUses(0), idTool(nextId++), owner(NULL)
{
    
    std::cout << YELLOW << "ATool default constructor called" << RESET 
        << std::endl;
    printToolInfo(); 
}



ATool::ATool(std::string const &type) : type(type), numberOfUses(0), 
    idTool(nextId++), owner(NULL)
{
    
    std::cout << YELLOW << "ATool parameterized constructor called" << RESET 
        << std::endl;
    printToolInfo();
}


ATool::ATool(ATool const &src) : idTool(nextId++)
{
    *this = src;
    
    std::cout << YELLOW << "ATool copy constructor called" << RESET 
        << std::endl;
    printToolInfo();
}


ATool::~ATool(void)
{
    
    std::cout << ORANGE << "ATool destructor called" << RESET << std::endl;

    printToolInfo();
}



ATool &ATool::operator=(ATool const &src)
{
    if (this != &src)
    {
        this->numberOfUses = src.numberOfUses;
    }
    
    std::cout << YELLOW << "ATool assignation operator called" << RESET 
        << std::endl;
    printToolInfo();
    
    return (*this);
}


const std::string &ATool::getType(void) const
{
    
    std::cout << YELLOW << "Tool type: " << this->type << RESET << std::endl;
    return (this->type);
}


const size_t &ATool::getNumberOfUses(void) const
{
    
    std::cout << YELLOW << "Number of uses: " << this->numberOfUses << RESET 
        << std::endl;
    return (this->numberOfUses);
}


const size_t &ATool::getIdTool(void) const
{
    
    std::cout << YELLOW << "ID: " << this->idTool << RESET << std::endl;
    return (this->idTool);
}


Worker *ATool::getOwner(void) const
{
    
    std::cout << YELLOW << "Owner: " << this->owner << RESET << std::endl;
    return (this->owner);
}


void ATool::printToolInfo(void) const
{
    
    std::cout << "\n------------Tool info------------" << std::endl;
    getType();
    getIdTool();
    getNumberOfUses();
    getOwner();
    std::cout << "---------------------------------\n" << std::endl;
}


void ATool::setOwner(Worker *newOwner)
{
    this->owner = newOwner;
    
    std::cout << YELLOW << "Owner set to: " << this->owner << RESET 
        << std::endl;
    printToolInfo();
}
















#include "../includes/Shovel.hpp"

Shovel::Shovel(void) : ATool("Shovel")
{    
    std::cout << YELLOW << "Shovel default constructor called" << RESET 
        << std::endl;
}

Shovel::Shovel(const Shovel &src) : ATool(src)
{
    *this = src;
    this->numberOfUses = 0;
    this->owner = NULL;
    
    std::cout << YELLOW << "Shovel copy constructor called" << RESET 
        << std::endl;
}

Shovel::~Shovel(void)
{
    
    std::cout << ORANGE << "Shovel destructor called" << RESET << std::endl;
}

Shovel &Shovel::operator=(const Shovel &rhs)
{
    if (this != &rhs)
    {
        this->type = rhs.type;
        this->numberOfUses = 0;
        this->owner = NULL;
    }
    
    std::cout << YELLOW << "Shovel assignation operator called" << RESET 
        << std::endl;
    
    return (*this);
}

void Shovel::use(void)
{
    this->numberOfUses++;
    
    std::cout << YELLOW << "Shovel used" << RESET << std::endl;
    printToolInfo();
}














#include "../includes/Hammer.hpp"

Hammer::Hammer(void) : ATool("Hammer")
{    
    std::cout << YELLOW << "Hammer default constructor called" << RESET 
        << std::endl;
}

Hammer::Hammer(const Hammer &src) : ATool(src)
{
    *this = src;
    this->numberOfUses = 0;
    this->owner = NULL;
    
    std::cout << YELLOW << "Hammer copy constructor called" << RESET 
        << std::endl;
}

Hammer::~Hammer(void)
{
    
    std::cout << ORANGE << "Hammer destructor called" << RESET << std::endl;
}

Hammer &Hammer::operator=(const Hammer &rhs)
{
    if (this != &rhs)
    {
        this->type = rhs.type;
        this->numberOfUses = 0;
        this->owner = NULL;
    }
    
    std::cout << YELLOW << "Hammer assignation operator called" << RESET 
        << std::endl;
    
    return (*this);
}

void Hammer::use(void)
{
    this->numberOfUses++;
    
    std::cout << YELLOW << "Hammer used" << RESET << std::endl;
    printToolInfo();
}


